/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0/userguide/building_java_projects.html
 */

buildscript {
    ext {
        groovyVersion = '3.0.13'
        lombokVersion = '1.18.22'
        jacksonVersion = '2.11.1'
        junitVersion = '4.13.2'
        spockVersion = '2.0-groovy-3.0'
        byteBuddyVersion = '1.11.13'
        guavaVersion = '31.1-jre'
        springFoxStarterVersion = '3.0.0'
        springFoxUiVersion = '3.0.0'
        postgreVersion = '42.2.19'
        flywayVersion = '7.6.0'
    }
}

plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'checkstyle'

    id 'jacoco'

    id 'org.springframework.boot' version'2.4.2'

    id 'io.spring.dependency-management' version'1.0.11.RELEASE'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for Spock testing
    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "junit:junit:${junitVersion}"


    // This dependency is used by the application.
    implementation "com.google.guava:guava:${guavaVersion}"

    implementation "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // This dependency is used by the Jackson application.
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    // Mock dependencies
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "net.bytebuddy:byte-buddy:${byteBuddyVersion}"

    //Spring framework
    implementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"

    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"

    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    runtimeOnly "org.postgresql:postgresql:${postgreVersion}"
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

application {
    // Define the main class for the application.
    mainClass = 'pl.futurecollars.invoicing.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory == layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.90
            }
        }

        rule {
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'pl/futurecollars/invoicing/InvoiceApplication.class')
        }))
    }
}
startScripts {
    dependsOn bootJar
}

tasks.register('testWithMemoryDatabase', Test) {
    systemProperty "spring.profiles.active", "memory"
}

tasks.register('testWithFileDatabase', Test) {
    systemProperty "spring.profiles.active", "file"
}

tasks.register('testWithSqlDatabase', Test) {
    systemProperty "spring.profiles.active", "sql"
}

check.dependsOn "testWithMemoryDatabase"
check.dependsOn "testWithFileDatabase"
//check.dependsOn "testWithSqlDatabase"
